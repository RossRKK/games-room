{
  "_from": "require-all",
  "_id": "require-all@3.0.0",
  "_inBundle": false,
  "_integrity": "sha1-Rz1JcEvjEBFc4ST3c4Ox69hnExI=",
  "_location": "/require-all",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "require-all",
    "fetchSpec": "latest",
    "name": "require-all",
    "raw": "require-all",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/require-all/-/require-all-3.0.0.tgz",
  "_shasum": "473d49704be310115ce124f77383b1ebd8671312",
  "_shrinkwrap": null,
  "_spec": "require-all",
  "_where": "/cs/home/rkk2/Documents/hackathons/stacs-hack-v",
  "author": {
    "email": "felix@debuggable.com",
    "name": "Felix GeisendÃ¶rfer",
    "url": "http://debuggable.com/"
  },
  "bugs": {
    "url": "https://github.com/felixge/node-require-all/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Douglas Christopher Wilson",
      "email": "doug@somethingdoug.com"
    },
    {
      "name": "Prince Obiechine Onyenike",
      "email": "leewaygroups@gmail.com"
    },
    {
      "name": "Nuno Job",
      "email": "nunojobpinto@gmail.com",
      "url": "http://nunojob.com"
    }
  ],
  "dependencies": {},
  "deprecated": false,
  "description": "An easy way to require all files within a directory.",
  "devDependencies": {},
  "engines": {
    "node": ">= 0.8"
  },
  "files": [
    "Changes.md",
    "LICENSE",
    "Readme.md",
    "index.js"
  ],
  "homepage": "https://github.com/felixge/node-require-all#readme",
  "license": "MIT",
  "name": "require-all",
  "optionalDependencies": {},
  "readme": "# require-all\n\nAn easy way to require all files within a directory.\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Build Status][travis-image]][travis-url]\n\n## Usage\n\n```js\nvar controllers = require('require-all')({\n  dirname     :  __dirname + '/controllers',\n  filter      :  /(.+Controller)\\.js$/,\n  excludeDirs :  /^\\.(git|svn)$/,\n  recursive   : true\n});\n\n// controllers now is an object with references to all modules matching the filter\n// for example:\n// { HomeController: function HomeController() {...}, ...}\n```\n\n## Advanced usage\n\nIf your objective is to simply require all .js and .json files in a directory\nyou can just pass a string to require-all:\n\n``` js\nvar libs = require('require-all')(__dirname + '/lib');\n```\n\n### Constructed object usage\n\nIf your directory contains files that all export constructors, you can require\nthem all and automatically construct the objects using `resolve`:\n\n```js\nvar controllers = require('require-all')({\n  dirname     :  __dirname + '/controllers',\n  filter      :  /(.+Controller)\\.js$/,\n  resolve     : function (Controller) {\n    return new Controller();\n  }\n});\n```\n\n### Alternative property names\n\nIf your directory contains files where the names do not match what you want in\nthe resulting property (for example, you want camelCase but the file names are\nsnake_case), then you can use the `map` function. The `map` function is called\non both file and directory names, as they are added to the resulting object.\n\n```js\nvar controllers = require('require-all')({\n  dirname :  __dirname + '/controllers',\n  filter  :  /(.+Controller)\\.js$/,\n  map     : function (name, path) {\n    return name.replace(/_([a-z])/g, function (m, c) {\n      return c.toUpperCase();\n    });\n  }\n});\n```\n\n### Filtering files\n\nIf your directory contains files that you do not want to require, or that you\nwant only a part of the file's name to be used as the property name, `filter`\ncan be a regular expression. In the following example, the `filter` is set to\n`/^(.+Controller)\\.js$/`, which means only files that end in \"Controller.js\"\nare required, and the resulting property name will be the name of the file\nwithout the \".js\" extension. For example, the file \"MainController.js\" will\nmatch, and since the first capture group will contain \"MainController\", that\nwill be the property name used. If no capture group is used, then the entire\nmatch will be used as the name.\n\n```js\nvar controllers = require('require-all')({\n  dirname : __dirname + '/controllers',\n  filter  : /^(.+Controller)\\.js$/\n});\n```\n\nFor even more advanced usage, the `filter` option also accepts a function that\nis invoked with the file name as the first argument. The filter function is\nexpected to return a falsy value to ignore the file, otherwise a string to use\nas the property name.\n\n```js\nvar controllers = requireAll({\n  dirname : __dirname + '/controllers',\n  filter  : function (fileName) {\n    var parts = fileName.split('-');\n    if (parts[1] !== 'Controller.js') return;\n    return parts[0];\n  }\n});\n```\n\nNote that empty directories are always excluded from the end result.\n\n[npm-image]: https://img.shields.io/npm/v/require-all.svg\n[npm-url]: https://npmjs.org/package/require-all\n[downloads-image]: https://img.shields.io/npm/dm/require-all.svg\n[downloads-url]: https://npmjs.org/package/require-all\n[travis-image]: https://img.shields.io/travis/felixge/node-require-all/master.svg\n[travis-url]: https://travis-ci.org/felixge/node-require-all\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/felixge/node-require-all.git"
  },
  "scripts": {
    "test": "node test/test.js"
  },
  "version": "3.0.0"
}
